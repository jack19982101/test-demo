{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/geometry/label/util/index.ts"],"names":[],"mappings":";;;AAIA,mCAA6C;AAC7C,qDAAiD;AAGjD;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,KAAa;IAC9C,OAAO,KAAK,CAAC,IAAI,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,MAAM,EAAzB,CAAyB,CAAC,CAAC;AACvD,CAAC;AAFD,gDAEC;AAED;;GAEG;AACH,SAAgB,uBAAuB,CACrC,UAAkB,EAClB,SAAoB,EACpB,OAAyC;IAAzC,wBAAA,EAAA,WAA8B,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAEzC,IAAM,OAAO,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAI,OAAO,EAAE;QACX,IAAM,UAAU,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;QAEnC,gBAAgB;QAChB,IAAI,SAAS,CAAC,MAAM,EAAE;YACpB,kBAAM,CAAC,UAAoB,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACjD;QAED,qGAAqG;QAC/F,IAAA,KAA0B,UAAU,CAAC,aAAa,EAAE,EAAlD,CAAC,OAAA,EAAE,CAAC,OAAA,EAAE,KAAK,WAAA,EAAE,MAAM,YAA+B,CAAC;QAE3D,UAAU,CAAC,OAAO,EAAE,CAAC;QAErB,IAAI,UAAU,GAAG,OAAO,CAAC;QACzB,IAAI,YAAK,CAAC,UAAU,CAAC,EAAE;YACrB,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SAC3B;aAAM,IAAI,eAAQ,CAAC,UAAU,CAAC,EAAE;YAC/B,UAAU,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC5C;QAED,OAAO;YACL,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;YACpB,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;YACpB,KAAK,EAAE,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;YAC5C,MAAM,EAAE,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;YAC9C,QAAQ,EAAE,SAAS,CAAC,MAAM,IAAI,CAAC;SAChC,CAAC;KACH;AACH,CAAC;AAlCD,0DAkCC","sourcesContent":["/**\n * @file utils of label\n */\nimport { IElement, IGroup } from '@antv/g-base';\nimport { isNil, isNumber } from '@antv/util';\nimport { rotate } from '../../../util/transform';\nimport { LabelItem } from '../interface';\n\n/**\n * 查找 Label Group 中的文本 shape 对象\n * @param label\n */\nexport function findLabelTextShape(label: IGroup): IElement {\n  return label.find((el) => el.get('type') === 'text');\n}\n\n/**\n * 获取标签背景信息: box (无旋转) + rotation (旋转角度)\n */\nexport function getlLabelBackgroundInfo(\n  labelGroup: IGroup,\n  labelItem: LabelItem,\n  padding: number | number[] = [0, 0, 0, 0]\n): { x: number; y: number; width: number; height: number; rotation: number } {\n  const content = labelGroup.getChildren()[0];\n  if (content) {\n    const labelShape = content.clone();\n\n    // revert rotate\n    if (labelItem.rotate) {\n      rotate(labelShape as IGroup, -labelItem.rotate);\n    }\n\n    // use `getCanvasBBox`, because if Shape is been translated, `getBBox` is not the actual box position\n    const { x, y, width, height } = labelShape.getCanvasBBox();\n\n    labelShape.destroy();\n\n    let boxPadding = padding;\n    if (isNil(boxPadding)) {\n      boxPadding = [2, 2, 2, 2];\n    } else if (isNumber(boxPadding)) {\n      boxPadding = new Array(4).fill(boxPadding);\n    }\n\n    return {\n      x: x - boxPadding[3],\n      y: y - boxPadding[0],\n      width: width + boxPadding[1] + boxPadding[3],\n      height: height + boxPadding[0] + boxPadding[2],\n      rotation: labelItem.rotate || 0,\n    };\n  }\n}\n"]}