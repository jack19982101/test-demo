import { Options, ShapeAttr, SizeAttr, StyleAttr } from '../../types';
import { LineOptions } from '../line/types';
import { ColumnOptions } from '../column/types';
export declare enum AxisType {
    Left = "Left",
    Right = "Right"
}
export declare enum DualAxesGeometry {
    Line = "line",
    Column = "column"
}
export interface PointConfig {
    readonly shape?: ShapeAttr;
    readonly size?: SizeAttr;
    readonly style?: StyleAttr;
}
declare type CommonGeometryOption = {
    readonly geometry?: string;
    readonly label?: Options['label'];
    readonly color?: Options['color'];
};
export declare type GeometryLineOption = Pick<LineOptions, 'seriesField' | 'smooth' | 'connectNulls' | 'lineStyle' | 'point'> & CommonGeometryOption;
export declare type GeometryColumnOption = Pick<ColumnOptions, 'seriesField' | 'isGroup' | 'isStack' | 'columnWidthRatio' | 'marginRatio' | 'columnStyle'> & CommonGeometryOption;
export declare type GeometryOption = GeometryColumnOption | GeometryLineOption;
export declare type DualAxesOptions = Omit<Options, 'data' | 'yAxis' | 'color'> & {
    /** 具体的数据 */
    readonly data: Array<Record<string, any>[]>;
    readonly xField: string;
    readonly yField: string[];
    readonly geometryOptions?: GeometryOption[];
    readonly yAxis?: Options['yAxis'][];
};
export {};
