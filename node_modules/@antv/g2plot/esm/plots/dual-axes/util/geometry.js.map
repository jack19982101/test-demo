{"version":3,"file":"geometry.js","sourceRoot":"","sources":["../../../../src/plots/dual-axes/util/geometry.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAErC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACpE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAEpD,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAE5C;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAChC,MAAiB;IAET,IAAA,OAAO,GAAY,MAAM,QAAlB,EAAE,KAAK,GAAK,MAAM,MAAX,CAAY;IAC1B,IAAA,cAAc,GAAa,OAAO,eAApB,EAAE,MAAM,GAAK,OAAO,OAAZ,CAAa;IAE3C,IAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACvC,IAAI,MAAM,CAAC,cAAc,CAAC,EAAE;QAC1B,MAAM;QACN,IAAI,CACF,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE;YAClB,OAAO,iCACF,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,GACxB,IAAI,CAAC,cAAc,EAAE,CAAC,aAAa,CAAC,CAAC,KACxC,YAAY,EAAE,cAAc,CAAC,YAAY,EACzC,MAAM,EAAE,cAAc,CAAC,MAAM,EAC7B,IAAI,wBACC,IAAI,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC,KAClC,KAAK,EAAE,cAAc,CAAC,SAAS,MAElC;SACF,CAAC,CACH,CAAC;QACF,MAAM;QACN,KAAK,CACH,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE;YAClB,OAAO,wBACF,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,KAC3B,KAAK,EAAE,cAAc,CAAC,KAAK,GAC5B;SACF,CAAC,CACH,CAAC;KACH;IAED,IAAI,QAAQ,CAAC,cAAc,CAAC,EAAE;QAC5B,QAAQ,CACN,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE;YAClB,OAAO,iCACF,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,GACxB,IAAI,CAAC,cAAc,EAAE,CAAC,aAAa,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,KAC9D,WAAW,EAAE,cAAc,CAAC,WAAW,EACvC,UAAU,EAAE,cAAc,CAAC,gBAAgB,EAC3C,QAAQ,wBACH,IAAI,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC,KAClC,KAAK,EAAE,cAAc,CAAC,WAAW,MAEpC;SACF,CAAC,CACH,CAAC;KACH;IAED,WAAW;IACX,IAAM,YAAY,GAAG,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,YAAY,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IACpF,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE;QACzB,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC3B;SAAM;QACL,IAAM,KAAuB,cAAc,CAAC,KAAK,EAAzC,QAAQ,cAAA,EAAK,GAAG,cAAlB,YAAoB,CAAuB,CAAC;QAClD,YAAY,CAAC,KAAK,CAAC;YACjB,MAAM,EAAE,CAAC,MAAM,CAAC;YAChB,QAAQ,UAAA;YACR,GAAG,KAAA;SACJ,CAAC,CAAC;KACJ;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { deepMix } from '@antv/util';\nimport { Params } from '../../../core/adaptor';\nimport { point, line, interval } from '../../../adaptor/geometries';\nimport { pick, findGeometry } from '../../../utils';\nimport { GeometryOption } from '../types';\nimport { isLine, isColumn } from './option';\n\n/**\n * 绘制单个图形\n * @param params\n */\nexport function drawSingleGeometry<O extends { xField: string; yField: string; geometryOption: GeometryOption }>(\n  params: Params<O>\n): Params<O> {\n  const { options, chart } = params;\n  const { geometryOption, yField } = options;\n\n  const FIELD_KEY = ['xField', 'yField'];\n  if (isLine(geometryOption)) {\n    // 绘制线\n    line(\n      deepMix({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...pick(geometryOption, ['seriesField']),\n          connectNulls: geometryOption.connectNulls,\n          smooth: geometryOption.smooth,\n          line: {\n            ...pick(geometryOption, ['color']),\n            style: geometryOption.lineStyle,\n          },\n        },\n      })\n    );\n    // 绘制点\n    point(\n      deepMix({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          point: geometryOption.point,\n        },\n      })\n    );\n  }\n\n  if (isColumn(geometryOption)) {\n    interval(\n      deepMix({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...pick(geometryOption, ['seriesField', 'isGroup', 'isStack']),\n          marginRatio: geometryOption.marginRatio,\n          widthRatio: geometryOption.columnWidthRatio,\n          interval: {\n            ...pick(geometryOption, ['color']),\n            style: geometryOption.columnStyle,\n          },\n        },\n      })\n    );\n  }\n\n  // 绘制 label\n  const mainGeometry = findGeometry(chart, 'line') || findGeometry(chart, 'interval');\n  if (!geometryOption.label) {\n    mainGeometry.label(false);\n  } else {\n    const { callback, ...cfg } = geometryOption.label;\n    mainGeometry.label({\n      fields: [yField],\n      callback,\n      cfg,\n    });\n  }\n\n  return params;\n}\n"]}