import { __assign, __rest } from "tslib";
import { deepMix } from '@antv/util';
import { point, line, interval } from '../../../adaptor/geometries';
import { pick, findGeometry } from '../../../utils';
import { isLine, isColumn } from './option';
/**
 * 绘制单个图形
 * @param params
 */
export function drawSingleGeometry(params) {
    var options = params.options, chart = params.chart;
    var geometryOption = options.geometryOption, yField = options.yField;
    var FIELD_KEY = ['xField', 'yField'];
    if (isLine(geometryOption)) {
        // 绘制线
        line(deepMix({}, params, {
            options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), pick(geometryOption, ['seriesField'])), { connectNulls: geometryOption.connectNulls, smooth: geometryOption.smooth, line: __assign(__assign({}, pick(geometryOption, ['color'])), { style: geometryOption.lineStyle }) }),
        }));
        // 绘制点
        point(deepMix({}, params, {
            options: __assign(__assign({}, pick(options, FIELD_KEY)), { point: geometryOption.point }),
        }));
    }
    if (isColumn(geometryOption)) {
        interval(deepMix({}, params, {
            options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), pick(geometryOption, ['seriesField', 'isGroup', 'isStack'])), { marginRatio: geometryOption.marginRatio, widthRatio: geometryOption.columnWidthRatio, interval: __assign(__assign({}, pick(geometryOption, ['color'])), { style: geometryOption.columnStyle }) }),
        }));
    }
    // 绘制 label
    var mainGeometry = findGeometry(chart, 'line') || findGeometry(chart, 'interval');
    if (!geometryOption.label) {
        mainGeometry.label(false);
    }
    else {
        var _a = geometryOption.label, callback = _a.callback, cfg = __rest(_a, ["callback"]);
        mainGeometry.label({
            fields: [yField],
            callback: callback,
            cfg: cfg,
        });
    }
    return params;
}
//# sourceMappingURL=geometry.js.map