import { __assign, __extends } from "tslib";
import { Action } from '@antv/g2/lib/interaction';
import { each, get } from '@antv/util';
/**
 * Pie 中心文本事件的 Action
 */
var StatisticAction = /** @class */ (function (_super) {
    __extends(StatisticAction, _super);
    function StatisticAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StatisticAction.prototype.getAnnotations = function () {
        var view = this.context.view;
        return view.getComponents().filter(function (co) { return co.type === 'annotation'; });
    };
    StatisticAction.prototype.getInitialAnnotation = function () {
        return this.initialAnnotation;
    };
    StatisticAction.prototype.init = function () {
        var view = this.context.view;
        view.removeInteraction('tooltip');
    };
    StatisticAction.prototype.change = function () {
        var _a = this.context, view = _a.view, event = _a.event;
        var annotations = this.getAnnotations();
        if (!this.initialAnnotation) {
            this.initialAnnotation = annotations;
        }
        var data = event.data.data;
        if (data) {
            var annotationController_1 = view.getController('annotation');
            // todo remove ignore
            // @ts-ignore
            annotationController_1.clear(true);
            // @ts-ignore
            var _b = view.getScaleFields(), angleField_1 = _b[1], colorField_1 = _b[2];
            var angleScale_1 = view.getScaleByField(angleField_1);
            var colorScale_1 = view.getScaleByField(colorField_1);
            var annotationOptions_1 = annotations.filter(function (a) { return get(a, 'extra.key') !== 'statistic'; }).map(function (a) { return a.extra; });
            var statisticOptions = annotations.filter(function (a) { return get(a, 'extra.key') === 'statistic'; }).map(function (a) { return a.extra || {}; });
            each(statisticOptions, function (options, idx) {
                var value;
                if (idx === 0) {
                    // title
                    value = colorScale_1 ? colorScale_1.getText(data[colorField_1]) : null;
                }
                else {
                    value = angleScale_1 ? angleScale_1.getText(data[angleField_1]) : data[angleField_1];
                }
                annotationOptions_1.push(__assign(__assign({}, options), { content: options.formatter ? options.formatter(data, view.getData()) : value }));
            });
            annotationOptions_1.forEach(function (opt) {
                // todo remove ignore
                // @ts-ignore
                annotationController_1.annotation(opt);
            });
            view.render(true);
        }
    };
    StatisticAction.prototype.reset = function () {
        var view = this.context.view;
        var annotationController = view.getController('annotation');
        // todo remove ignore
        // @ts-ignore
        annotationController.clear(true);
        var initialStatistic = this.getInitialAnnotation();
        each(initialStatistic, function (a) {
            view.annotation().text(get(a, 'extra', {}));
        });
        view.render(true);
    };
    return StatisticAction;
}(Action));
export { StatisticAction };
//# sourceMappingURL=pie-statistic-action.js.map