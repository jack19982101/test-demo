import { __rest } from "tslib";
import { deepMix, each } from '@antv/util';
import { tooltip, slider, interaction, animation, theme, annotation } from '../../adaptor/common';
import { findGeometry } from '../../utils';
import { area, point, line } from '../../adaptor/geometries';
import { flow } from '../../utils';
import { meta, legend, axis } from '../line/adaptor';
/**
 * geometry 处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var data = options.data, areaStyle = options.areaStyle, color = options.color, pointOptions = options.point, lineOptions = options.line;
    chart.data(data);
    var p = deepMix({}, params, {
        options: {
            area: { color: color, style: areaStyle },
            line: lineOptions,
            point: pointOptions,
        },
    });
    // area geometry 处理
    area(p);
    line(p);
    point(p);
    return params;
}
/**
 * 数据标签
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label, yField = options.yField;
    var areaGeometry = findGeometry(chart, 'area');
    // label 为 false, 空 则不显示 label
    if (!label) {
        areaGeometry.label(false);
    }
    else {
        var callback = label.callback, cfg = __rest(label, ["callback"]);
        areaGeometry.label({
            fields: [yField],
            callback: callback,
            cfg: cfg,
        });
    }
    return params;
}
/**
 * 统一处理 adjust
 * @param params
 */
function adjust(params) {
    var chart = params.chart;
    each(chart.geometries, function (g) {
        g.adjust('stack');
    });
    return params;
}
/**
 * 折线图适配器
 * @param chart
 * @param options
 */
export function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return flow(geometry, meta, adjust, theme, axis, legend, tooltip, label, slider, annotation(), interaction, animation)(params);
}
//# sourceMappingURL=adaptor.js.map