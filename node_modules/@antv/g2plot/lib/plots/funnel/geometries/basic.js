"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.basicFunnel = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var util_2 = require("@antv/util");
var utils_1 = require("../../../utils");
var constant_1 = require("../constant");
var util_3 = require("./util");
/**
 * 处理数据
 * @param params
 */
function format(params) {
    var options = params.options;
    var _a = options.data, data = _a === void 0 ? [] : _a, yField = options.yField;
    var formatData = [];
    // format 数据
    if (data[0][yField]) {
        formatData = util_1.map(data, function (row) {
            if (row[yField] !== undefined) {
                row[constant_1.FUNNEL_PERCENT] = row[yField] / data[0][yField];
            }
            return row;
        });
    }
    return util_1.deepMix({}, params, {
        options: {
            formatData: formatData,
        },
    });
}
/**
 * geometry处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var _a = options.formatData, formatData = _a === void 0 ? [] : _a, xField = options.xField, yField = options.yField, color = options.color;
    // 绘制漏斗图
    chart.data(formatData);
    chart
        .interval()
        .adjust('symmetric')
        .position(xField + "*" + yField + "*" + constant_1.FUNNEL_PERCENT)
        .shape('funnel')
        .color(xField, color);
    return params;
}
/**
 * label 处理
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label, yField = options.yField, xField = options.xField;
    var geometry = utils_1.findGeometry(chart, 'interval');
    if (!label) {
        geometry.label(false);
    }
    else {
        var callback = label.callback, cfg = tslib_1.__rest(label, ["callback"]);
        geometry.label({
            fields: [xField, yField, constant_1.FUNNEL_PERCENT],
            callback: callback,
            cfg: cfg,
        });
    }
    return params;
}
/**
 * annotation 处理
 * @param params
 */
function annotation(params) {
    var chart = params.chart, options = params.options;
    var _a = options.formatData, formatData = _a === void 0 ? [] : _a, xField = options.xField, yField = options.yField, annotation = options.annotation;
    if (annotation !== false) {
        formatData.forEach(function (obj) {
            chart.annotation().text({
                top: true,
                position: [obj[xField], 'median'],
                content: util_2.isFunction(annotation) ? annotation(obj[xField], obj[yField], obj[constant_1.FUNNEL_PERCENT], obj) : annotation,
                style: {
                    stroke: null,
                    fill: '#fff',
                    textAlign: 'center',
                },
            });
        });
    }
    return params;
}
/**
 * 基础漏斗
 * @param chart
 * @param options
 */
function basicFunnel(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_1.flow(format, geometry, util_3.transpose, label, annotation)(params);
}
exports.basicFunnel = basicFunnel;
//# sourceMappingURL=basic.js.map