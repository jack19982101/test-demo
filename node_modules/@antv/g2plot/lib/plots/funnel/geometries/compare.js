"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compareFunnel = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var utils_1 = require("../../../utils");
var constant_1 = require("../constant");
/**
 * 处理数据
 * @param params
 */
function format(params) {
    var options = params.options;
    var _a = options.data, data = _a === void 0 ? [] : _a, yField = options.yField, compareField = options.compareField;
    var formatData = [];
    if (data[0][yField]) {
        // format 数据
        var firstRecord_1 = {};
        formatData = util_1.map(data, function (row) {
            if (row[yField] !== undefined && row[compareField]) {
                if (!firstRecord_1[row[compareField]]) {
                    firstRecord_1[row[compareField]] = row[yField];
                }
                row[constant_1.FUNNEL_PERCENT] = row[yField] / firstRecord_1[row[compareField]];
            }
            return row;
        });
    }
    return util_1.deepMix({}, params, {
        options: {
            formatData: formatData,
        },
    });
}
/**
 * geometry处理
 * @param params
 */
function geometry(params) {
    var _a;
    var chart = params.chart, options = params.options;
    var _b = options.formatData, formatData = _b === void 0 ? [] : _b, xField = options.xField, yField = options.yField, color = options.color, compareField = options.compareField, label = options.label, transpose = options.transpose;
    // 绘制漏斗图
    chart.data(formatData);
    chart.scale((_a = {},
        _a[yField] = {
            sync: true,
        },
        _a));
    chart.facet('mirror', {
        fields: [compareField, null],
        // 漏斗图的转置规则与分面相反，默认是垂直布局
        transpose: !transpose,
        padding: 0,
        eachView: function (view, facet) {
            if (!transpose) {
                // 垂直布局
                view
                    .coordinate('rect')
                    .transpose()
                    .scale(facet.columnIndex === 0 ? -1 : 1, -1);
            }
            // 绘制图形
            var funnelGeometry = view
                .interval()
                .position(xField + "*" + yField + "*" + constant_1.FUNNEL_PERCENT)
                .shape('funnel')
                .color(xField, color)
                .style({
                lineWidth: 1,
                stroke: '#fff',
            });
            // 对比漏斗图中，使用分面无法同步获取到 chart.views，因此 label 和 annotation 不做拆分，逻辑直接写在下方
            // 绘制 label
            if (!label) {
                funnelGeometry.label(false);
            }
            else {
                var callback = label.callback, cfg = tslib_1.__rest(label, ["callback"]);
                funnelGeometry.label({
                    fields: [xField, yField, constant_1.FUNNEL_PERCENT],
                    callback: callback,
                    cfg: cfg,
                });
            }
            // 绘制 annotation
            formatData.map(function (obj) {
                if (obj[compareField] === facet.columnValue) {
                    view.annotation().text({
                        top: true,
                        position: [obj[xField], 'min'],
                        content: obj[yField],
                        style: {
                            fill: '#fff',
                            stroke: null,
                            fontSize: 12,
                            textAlign: facet.columnIndex ? 'start' : 'end',
                        },
                        offsetX: facet.columnIndex ? 10 : -10,
                    });
                }
                return null;
            });
        },
    });
    return params;
}
/**
 * 对比漏斗
 * @param chart
 * @param options
 */
function compareFunnel(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_1.flow(format, geometry)(params);
}
exports.compareFunnel = compareFunnel;
//# sourceMappingURL=compare.js.map