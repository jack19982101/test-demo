"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformData = void 0;
var tslib_1 = require("tslib");
var data_set_1 = tslib_1.__importDefault(require("@antv/data-set"));
/**
 * sunburst 处理数据
 * @param options
 */
function transformData(options) {
    var data = options.data, type = options.type, seriesField = options.seriesField, colorField = options.colorField, hierarchyConfig = options.hierarchyConfig;
    var DataView = data_set_1.default.DataView;
    var dv = new DataView();
    dv.source(data, {
        type: 'hierarchy',
    }).transform(tslib_1.__assign(tslib_1.__assign({}, hierarchyConfig), { 
        // @ts-ignore
        type: "hierarchy." + type, field: seriesField, as: ['x', 'y'] }));
    var nodes = dv.getAllNodes();
    var result = [];
    nodes.forEach(function (node) {
        var _a;
        var _b, _c;
        if (node.depth === 0) {
            return null;
        }
        var nodeInfo = tslib_1.__assign((_a = {}, _a[seriesField] = (_b = node.data) === null || _b === void 0 ? void 0 : _b[seriesField], _a[colorField] = (_c = node.data) === null || _c === void 0 ? void 0 : _c[colorField], _a), node);
        nodeInfo.ext = hierarchyConfig;
        if (!node.data.brand && node.parent) {
            nodeInfo.brand = node.parent.data.brand;
        }
        else {
            nodeInfo.brand = node.data.brand;
        }
        result.push(nodeInfo);
    });
    return result;
}
exports.transformData = transformData;
//# sourceMappingURL=utils.js.map