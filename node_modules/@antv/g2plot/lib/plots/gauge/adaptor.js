"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = void 0;
var util_1 = require("@antv/util");
var common_1 = require("../../adaptor/common");
var utils_1 = require("../../utils");
var constant_1 = require("./constant");
var utils_2 = require("./utils");
/**
 * geometry 处理
 * @param params
 */
function geometry(params) {
    var _a;
    var chart = params.chart, options = params.options;
    var percent = options.percent, range = options.range, radius = options.radius, innerRadius = options.innerRadius, startAngle = options.startAngle, endAngle = options.endAngle, axis = options.axis, indicator = options.indicator;
    var ticks = range.ticks, color = range.color;
    // 指标 & 指针
    var indicatorData = [(_a = {}, _a[constant_1.PERCENT] = percent, _a)];
    var v1 = chart.createView();
    v1.data(indicatorData);
    v1.point()
        .position(constant_1.PERCENT + "*1")
        .shape('gauge-indicator')
        // 传入指针的样式到自定义 shape 中
        .customInfo({
        indicator: indicator,
    });
    v1.coordinate('polar', {
        startAngle: startAngle,
        endAngle: endAngle,
        radius: innerRadius * radius,
    });
    v1.axis(constant_1.PERCENT, axis);
    // 辅助 range
    // [{ range: 1, type: '0' }]
    var rangeData = utils_2.processRangeData(ticks);
    var v2 = chart.createView();
    v2.data(rangeData);
    var rangeColor = util_1.isString(color) ? [color, constant_1.DEFAULT_COLOR] : util_1.isArray(color) ? color.concat(constant_1.DEFAULT_COLOR) : color;
    v2.interval().position("1*" + constant_1.RANGE_VALUE).color(constant_1.RANGE_TYPE, rangeColor).adjust('stack');
    v2.coordinate('polar', {
        innerRadius: innerRadius,
        radius: radius,
        startAngle: startAngle,
        endAngle: endAngle,
    }).transpose();
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    return utils_1.flow(common_1.scale({
        range: {
            min: 0,
            max: 1,
            maxLimit: 1,
            minLimit: 0,
        },
    }))(params);
}
/**
 * 统计指标文档
 * @param params
 */
function statistic(params) {
    var chart = params.chart, options = params.options;
    var statistic = options.statistic, percent = options.percent;
    var title = statistic.title, content = statistic.content;
    // annotation title 和 content 分别使用一个 text
    [title, content].forEach(function (annotation) {
        if (annotation) {
            var formatter = annotation.formatter, style = annotation.style, offsetX = annotation.offsetX, offsetY = annotation.offsetY, rotate = annotation.rotate;
            chart.annotation().text({
                top: true,
                position: ['50%', '100%'],
                content: util_1.isFunction(formatter) ? formatter({ percent: percent }) : "" + percent,
                style: util_1.isFunction(style) ? style({ percent: percent }) : style,
                offsetX: offsetX,
                offsetY: offsetY,
                rotate: rotate,
            });
        }
    });
    return params;
}
/**
 * other 配置
 * @param params
 */
function other(params) {
    var chart = params.chart;
    chart.legend(false);
    chart.tooltip(false);
    return params;
}
/**
 * 图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_1.flow(geometry, meta, statistic, common_1.interaction, common_1.animation, common_1.theme, other
    // ... 其他的 adaptor flow
    )(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map