{"version":3,"file":"adaptor.js","sourceRoot":"","sources":["../../../src/plots/heatmap/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { isFunction, isObject } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { findGeometry } from '../../utils';\nimport { flow } from '../../utils';\nimport { DEFAULT_COLORS } from '../../constant';\nimport { tooltip, interaction, animation, theme, scale } from '../../adaptor/common';\nimport { HeatmapOptions, ShapeType, SHAPE_TYPES } from './types';\n\n/**\n * 数据字段映射\n * @param params\n */\nfunction field(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { data, xField, yField, colorField, sizeField, sizeRatio, shapeType, color } = options;\n\n  chart.data(data);\n\n  const geometry = chart.polygon().position(`${xField}*${yField}`);\n\n  if (colorField) {\n    geometry.color(colorField, color || DEFAULT_COLORS.GRADIENT.CONTINUOUS);\n  }\n\n  /**\n   * The ratio between the actual size and the max available size, must be in range `[0,1]`.\n   *\n   * If the `sizeRatio` attribute is undefined or it exceeds the range,\n   * `checkedSizeRatio` would be set to 1 as default.\n   */\n  let checkedSizeRatio = 1;\n  if (sizeRatio || sizeRatio === 0) {\n    if (!shapeType && !sizeField) {\n      console.warn('sizeRatio is not in effect: Must define shapeType or sizeField first');\n    } else if (sizeRatio < 0 || sizeRatio > 1) {\n      console.warn('sizeRatio is not in effect: It must be a number in [0,1]');\n    } else {\n      checkedSizeRatio = sizeRatio;\n    }\n  }\n\n  /**\n   * The type of shape in each cell of heatmap.\n   *\n   * If a valid type is specified with `shapeType` attribute, the shape would be that type.\n   * If `shapeType` specifies an invalid type, the type would be set to `square` as default.\n   *\n   * If the `shapeType` is undefined but the `sizeField` attribute is specified,\n   * the type would be set to `square` as default since the original shape 'rectangle' can hardly\n   * be mapped with size.\n   */\n  let checkedShapeType: ShapeType;\n  if (shapeType) {\n    if (!(SHAPE_TYPES as string[]).includes(shapeType)) {\n      console.warn(`Invalid shapeType: Must be one of ${SHAPE_TYPES}, new set to default 'square'`);\n      checkedShapeType = 'square';\n    } else {\n      checkedShapeType = shapeType as ShapeType;\n    }\n  } else if (sizeField) {\n    checkedShapeType = 'square';\n  }\n\n  // when it has to change shape from original rect\n  if (checkedShapeType) {\n    // just to change shape in cell\n    if (!sizeField) {\n      geometry.shape('', () => {\n        return [`heatmap-${checkedShapeType}-size`, 1, checkedSizeRatio];\n      });\n    }\n\n    // specific shape in different size\n    if (sizeField) {\n      const field = data.map((row) => row[sizeField]);\n      const min = Math.min(...field);\n      const max = Math.max(...field);\n\n      geometry.shape(sizeField, (v) => {\n        return [`heatmap-${checkedShapeType}-size`, (v - min) / (max - min), checkedSizeRatio];\n      });\n    }\n  }\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  return flow(\n    scale({\n      [xField]: xAxis,\n      [yField]: yAxis,\n    })\n  )(params);\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  chart.axis(\n    xField,\n    Object.assign(\n      {\n        tickLine: null,\n        line: null,\n        grid: {\n          alignTick: false,\n          line: {\n            style: {\n              lineWidth: 1,\n              lineDash: null,\n              stroke: '#f0f0f0',\n            },\n          },\n        },\n      },\n      xAxis\n    )\n  );\n\n  chart.axis(\n    yField,\n    Object.assign(\n      {\n        grid: {\n          alignTick: false,\n          line: {\n            style: {\n              lineWidth: 1,\n              lineDash: null,\n              stroke: '#f0f0f0',\n            },\n          },\n        },\n      },\n      yAxis\n    )\n  );\n\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nfunction legend(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart } = params;\n\n  // TODO: chart legend\n  // legends overrided with color and size mapped with the same field,\n  // requre support from G2\n\n  // const { legend, colorField, sizeField } = params.options;\n\n  // if (legend && colorField) {\n  //   chart.legend(colorField, legend);\n  // }\n\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * 样式\n * @param params\n */\nfunction style(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { xField, yField, colorField, sizeField, heatmapStyle } = options;\n\n  const geometry = chart.geometries[0];\n  if (heatmapStyle && geometry) {\n    if (isFunction(heatmapStyle)) {\n      geometry.style(`${xField}*${yField}*${colorField}*${sizeField}`, heatmapStyle);\n    } else if (isObject(heatmapStyle)) {\n      geometry.style(heatmapStyle);\n    }\n  }\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { label, colorField } = options;\n\n  const geometry = findGeometry(chart, 'polygon');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [colorField],\n      callback,\n      cfg,\n    });\n  }\n\n  return params;\n}\n\n/**\n * 热力图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<HeatmapOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(field, meta, theme, axis, legend, tooltip, style, label, interaction, animation)(params);\n}\n"]}