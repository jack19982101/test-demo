"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var utils_1 = require("../../utils");
var utils_2 = require("../../utils");
var constant_1 = require("../../constant");
var common_1 = require("../../adaptor/common");
var types_1 = require("./types");
/**
 * 数据字段映射
 * @param params
 */
function field(params) {
    var chart = params.chart, options = params.options;
    var data = options.data, xField = options.xField, yField = options.yField, colorField = options.colorField, sizeField = options.sizeField, sizeRatio = options.sizeRatio, shapeType = options.shapeType, color = options.color;
    chart.data(data);
    var geometry = chart.polygon().position(xField + "*" + yField);
    if (colorField) {
        geometry.color(colorField, color || constant_1.DEFAULT_COLORS.GRADIENT.CONTINUOUS);
    }
    /**
     * The ratio between the actual size and the max available size, must be in range `[0,1]`.
     *
     * If the `sizeRatio` attribute is undefined or it exceeds the range,
     * `checkedSizeRatio` would be set to 1 as default.
     */
    var checkedSizeRatio = 1;
    if (sizeRatio || sizeRatio === 0) {
        if (!shapeType && !sizeField) {
            console.warn('sizeRatio is not in effect: Must define shapeType or sizeField first');
        }
        else if (sizeRatio < 0 || sizeRatio > 1) {
            console.warn('sizeRatio is not in effect: It must be a number in [0,1]');
        }
        else {
            checkedSizeRatio = sizeRatio;
        }
    }
    /**
     * The type of shape in each cell of heatmap.
     *
     * If a valid type is specified with `shapeType` attribute, the shape would be that type.
     * If `shapeType` specifies an invalid type, the type would be set to `square` as default.
     *
     * If the `shapeType` is undefined but the `sizeField` attribute is specified,
     * the type would be set to `square` as default since the original shape 'rectangle' can hardly
     * be mapped with size.
     */
    var checkedShapeType;
    if (shapeType) {
        if (!types_1.SHAPE_TYPES.includes(shapeType)) {
            console.warn("Invalid shapeType: Must be one of " + types_1.SHAPE_TYPES + ", new set to default 'square'");
            checkedShapeType = 'square';
        }
        else {
            checkedShapeType = shapeType;
        }
    }
    else if (sizeField) {
        checkedShapeType = 'square';
    }
    // when it has to change shape from original rect
    if (checkedShapeType) {
        // just to change shape in cell
        if (!sizeField) {
            geometry.shape('', function () {
                return ["heatmap-" + checkedShapeType + "-size", 1, checkedSizeRatio];
            });
        }
        // specific shape in different size
        if (sizeField) {
            var field_1 = data.map(function (row) { return row[sizeField]; });
            var min_1 = Math.min.apply(Math, field_1);
            var max_1 = Math.max.apply(Math, field_1);
            geometry.shape(sizeField, function (v) {
                return ["heatmap-" + checkedShapeType + "-size", (v - min_1) / (max_1 - min_1), checkedSizeRatio];
            });
        }
    }
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    var _a;
    var options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField, yField = options.yField;
    return utils_2.flow(common_1.scale((_a = {},
        _a[xField] = xAxis,
        _a[yField] = yAxis,
        _a)))(params);
}
/**
 * axis 配置
 * @param params
 */
function axis(params) {
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField, yField = options.yField;
    chart.axis(xField, Object.assign({
        tickLine: null,
        line: null,
        grid: {
            alignTick: false,
            line: {
                style: {
                    lineWidth: 1,
                    lineDash: null,
                    stroke: '#f0f0f0',
                },
            },
        },
    }, xAxis));
    chart.axis(yField, Object.assign({
        grid: {
            alignTick: false,
            line: {
                style: {
                    lineWidth: 1,
                    lineDash: null,
                    stroke: '#f0f0f0',
                },
            },
        },
    }, yAxis));
    return params;
}
/**
 * legend 配置
 * @param params
 */
function legend(params) {
    var chart = params.chart;
    // TODO: chart legend
    // legends overrided with color and size mapped with the same field,
    // requre support from G2
    // const { legend, colorField, sizeField } = params.options;
    // if (legend && colorField) {
    //   chart.legend(colorField, legend);
    // }
    chart.legend(false);
    return params;
}
/**
 * 样式
 * @param params
 */
function style(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, colorField = options.colorField, sizeField = options.sizeField, heatmapStyle = options.heatmapStyle;
    var geometry = chart.geometries[0];
    if (heatmapStyle && geometry) {
        if (util_1.isFunction(heatmapStyle)) {
            geometry.style(xField + "*" + yField + "*" + colorField + "*" + sizeField, heatmapStyle);
        }
        else if (util_1.isObject(heatmapStyle)) {
            geometry.style(heatmapStyle);
        }
    }
    return params;
}
/**
 * 数据标签
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label, colorField = options.colorField;
    var geometry = utils_1.findGeometry(chart, 'polygon');
    if (!label) {
        geometry.label(false);
    }
    else {
        var callback = label.callback, cfg = tslib_1.__rest(label, ["callback"]);
        geometry.label({
            fields: [colorField],
            callback: callback,
            cfg: cfg,
        });
    }
    return params;
}
/**
 * 热力图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_2.flow(field, meta, common_1.theme, axis, legend, common_1.tooltip, style, label, common_1.interaction, common_1.animation)(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map