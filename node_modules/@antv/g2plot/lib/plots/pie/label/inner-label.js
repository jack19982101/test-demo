"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PieInnerLabel = void 0;
var tslib_1 = require("tslib");
var g2_1 = require("@antv/g2");
var util_1 = require("@antv/util");
var utils_1 = require("../utils");
var PieLabel = g2_1.getGeometryLabel('pie');
var PieInnerLabel = /** @class */ (function (_super) {
    tslib_1.__extends(PieInnerLabel, _super);
    function PieInnerLabel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultLayout = 'pie-inner';
        return _this;
    }
    /**
     * 获取 label 的默认配置
     * - 饼图 inner-label 强制不显示 label 牵引线
     */
    PieInnerLabel.prototype.getDefaultLabelCfg = function () {
        var cfg = _super.prototype.getDefaultLabelCfg.call(this);
        return util_1.deepMix({}, cfg, { labelLine: false });
    };
    /**
     * 获取标签 offset距离（默认 -30% ）
     * todo G2 offset 允许百分比设置后，移除 ts-ignore
     */
    // @ts-ignore
    PieInnerLabel.prototype.getDefaultOffset = function (offset) {
        var coordinate = this.getCoordinate();
        var radius = coordinate.getRadius();
        var innerRadius = 0;
        var actualOffset = offset;
        if (util_1.isString(actualOffset)) {
            // 存在 innerRadius
            if (coordinate.innerRadius) {
                innerRadius = radius * (coordinate.innerRadius / coordinate.radius);
                actualOffset = (radius - innerRadius) * (utils_1.parsePercentageToNumber(actualOffset) + (coordinate.radius - 1));
            }
            else {
                actualOffset = radius * utils_1.parsePercentageToNumber(actualOffset);
            }
        }
        return util_1.isNil(actualOffset) || actualOffset > 0 ? -(radius - innerRadius) * 0.3 : actualOffset;
    };
    return PieInnerLabel;
}(PieLabel));
exports.PieInnerLabel = PieInnerLabel;
//# sourceMappingURL=inner-label.js.map