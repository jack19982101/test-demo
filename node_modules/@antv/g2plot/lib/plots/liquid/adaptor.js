"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = void 0;
var util_1 = require("@antv/util");
var common_1 = require("../../adaptor/common");
var utils_1 = require("../../utils");
var geometries_1 = require("../../adaptor/geometries");
var CAT_VALUE = 'liquid';
/**
 * geometry 处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var percent = options.percent, color = options.color, liquidStyle = options.liquidStyle, radius = options.radius;
    var data = [{ percent: percent, type: CAT_VALUE }];
    chart.scale({
        percent: {
            min: 0,
            max: 1,
        },
    });
    chart.data(data);
    var p = util_1.deepMix({}, params, {
        options: {
            xField: 'type',
            yField: 'percent',
            // radius 放到 columnWidthRatio 中。
            // 保证横向的大小是根据  redius 生成的
            widthRatio: radius,
            interval: {
                color: color,
                style: liquidStyle,
                shape: 'liquid-fill-gauge',
            },
        },
    });
    var ext = geometries_1.interval(p).ext;
    var geometry = ext.geometry;
    // 将 radius 传入到自定义 shape 中
    geometry.customInfo({
        radius: radius,
    });
    // 关闭组件
    chart.legend(false);
    chart.axis(false);
    chart.tooltip(false);
    return params;
}
/**
 * 统计指标文档
 * @param params
 */
function statistic(params) {
    var chart = params.chart, options = params.options;
    var statistic = options.statistic, percent = options.percent;
    var title = statistic.title, content = statistic.content;
    // annotation title 和 content 分别使用一个 text
    [title, content].forEach(function (annotation) {
        if (annotation) {
            var formatter = annotation.formatter, style = annotation.style, offsetX = annotation.offsetX, offsetY = annotation.offsetY, rotate = annotation.rotate;
            chart.annotation().text({
                top: true,
                position: {
                    type: CAT_VALUE,
                    percent: 0.5,
                },
                content: util_1.isFunction(formatter) ? formatter({ percent: percent }) : "" + percent,
                style: util_1.isFunction(style) ? style({ percent: percent }) : style,
                offsetX: offsetX,
                offsetY: offsetY,
                rotate: rotate,
            });
        }
    });
    return params;
}
/**
 * 水波图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_1.flow(geometry, statistic, common_1.scale({}), common_1.animation, common_1.theme, common_1.interaction)(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map