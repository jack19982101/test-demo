"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordCloud = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var plot_1 = require("../../core/plot");
var adaptor_1 = require("./adaptor");
var utils_1 = require("./utils");
// 注册的shape
require("./shapes/word-cloud");
var WordCloud = /** @class */ (function (_super) {
    tslib_1.__extends(WordCloud, _super);
    function WordCloud() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** 词云图 */
        _this.type = 'word-cloud';
        return _this;
    }
    /**
     * 获取默认的 options 配置项
     */
    WordCloud.prototype.getDefaultOptions = function () {
        return util_1.deepMix({}, _super.prototype.getDefaultOptions.call(this), {
            timeInterval: 2000,
            tooltip: {
                showTitle: false,
                showMarkers: false,
                showCrosshairs: false,
            },
            wordStyle: {
                fontFamily: 'Verdana',
                fontWeight: 'normal',
                padding: 1,
                fontSize: [20, 60],
                rotation: [0, 90],
                rotationSteps: 2,
                rotateRatio: 0.5,
            },
        });
    };
    /**
     * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染
     */
    WordCloud.prototype.render = function () {
        var _this = this;
        var imageMask = this.options.imageMask;
        if (!imageMask) {
            // 调用父类渲染函数
            _super.prototype.render.call(this);
            return;
        }
        utils_1.processImageMask(imageMask, function (img) {
            _this.options = tslib_1.__assign(tslib_1.__assign({}, _this.options), { imageMask: img || null });
            // 调用父类渲染函数
            _super.prototype.render.call(_this);
        });
    };
    /**
     * 获取 词云图 的适配器
     */
    WordCloud.prototype.getSchemaAdaptor = function () {
        return adaptor_1.adaptor;
    };
    /**
     * 覆写父类的方法，因为词云图使用 data-set 进行布局，原理上有些不一样
     */
    WordCloud.prototype.triggerResize = function () {
        if (!this.chart.destroyed) {
            // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标需要重新
            // 交给 data-set 进行计算，不然会出现布局错乱，如相邻词语重叠的情况。
            this.execAdaptor();
            // 执行父类的方法
            _super.prototype.triggerResize.call(this);
        }
    };
    return WordCloud;
}(plot_1.Plot));
exports.WordCloud = WordCloud;
//# sourceMappingURL=index.js.map