"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = exports.tooltip = exports.axis = exports.meta = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var data_set_1 = tslib_1.__importDefault(require("@antv/data-set"));
var common_1 = require("../../adaptor/common");
var utils_1 = require("../../utils");
var constant_1 = require("../../constant");
var constant_2 = require("./constant");
/**
 * 图表配置处理
 * @param params
 */
function field(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField;
    var data = options.data;
    // 加工处理源数据
    data = util_1.map(data, function (obj) {
        if (util_1.isArray(yField)) {
            var open_1 = yField[0], close_1 = yField[1], high = yField[2], low = yField[3];
            obj[constant_2.TREND_FIELD] = obj[open_1] <= obj[close_1] ? constant_2.TREND_UP : constant_2.TREND_DOWN;
            obj[constant_2.Y_FIELD] = [obj[open_1], obj[close_1], obj[high], obj[low]];
        }
        return obj;
    });
    var ds = new data_set_1.default();
    var dv = ds.createView().source(data);
    chart.data(dv.rows);
    var geometry = chart.schema().position(xField + "*" + constant_2.Y_FIELD).shape('candle');
    geometry.color(constant_2.TREND_FIELD, constant_2.TREND_COLOR);
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    var _a, _b;
    var chart = params.chart, options = params.options;
    var meta = options.meta, xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField;
    var baseMeta = (_a = {},
        _a[xField] = {
            type: 'timeCat',
            tickCount: 6,
        },
        _a[constant_2.TREND_FIELD] = {
            values: [constant_2.TREND_UP, constant_2.TREND_DOWN],
        },
        _a);
    var scales = util_1.deepMix(baseMeta, meta, (_b = {},
        _b[xField] = utils_1.pick(xAxis, constant_1.AXIS_META_CONFIG_KEYS),
        _b[constant_2.Y_FIELD] = utils_1.pick(yAxis, constant_1.AXIS_META_CONFIG_KEYS),
        _b));
    chart.scale(scales);
    return params;
}
exports.meta = meta;
/**
 * axis 配置
 * @param params
 */
function axis(params) {
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField;
    // 为 false 则是不显示轴
    if (xAxis === false) {
        chart.axis(xField, false);
    }
    else {
        chart.axis(xField, xAxis);
    }
    if (yAxis === false) {
        chart.axis(constant_2.Y_FIELD, false);
    }
    else {
        chart.axis(constant_2.Y_FIELD, yAxis);
    }
    return params;
}
exports.axis = axis;
/**
 * tooltip 配置
 * @param params
 */
function tooltip(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, _a = options.meta, meta = _a === void 0 ? {} : _a, _b = options.tooltip, tooltip = _b === void 0 ? false : _b;
    var geometry = utils_1.findGeometry(chart, 'schema');
    var open = yField[0], close = yField[1], high = yField[2], low = yField[3];
    var openAlias = meta[open] ? meta[open].alias || open : open;
    var closeAlias = meta[close] ? meta[close].alias || open : close;
    var highAlias = meta[high] ? meta[high].alias || high : high;
    var lowAlias = meta[low] ? meta[low].alias || low : low;
    var baseGeomTooltipOptions = {
        fields: [xField, open, close, high, low],
        callback: function (xFieldVal, openVal, closeVal, highVal, lowVal) {
            var tpl = {
                name: xFieldVal,
                value: "\n          <br><span data-label=\"" + openAlias + "\" style=\"padding-left: 16px\">" + openAlias + "\uFF1A" + openVal + "</span>\n          <br><span data-label=\"" + closeAlias + "\" style=\"padding-left: 16px\">" + closeAlias + "\uFF1A" + closeVal + "</span>\n          <br><span data-label=\"" + highAlias + "\" style=\"padding-left: 16px\">" + highAlias + "\uFF1A" + highVal + "</span>\n          <br><span data-label=\"" + lowAlias + "\" style=\"padding-left: 16px\">" + lowAlias + "\uFF1A" + lowVal + "</span>\n        ",
            };
            return tpl;
        },
    };
    if (tooltip) {
        if (util_1.isObject(tooltip)) {
            chart.tooltip(tooltip);
            geometry.tooltip(baseGeomTooltipOptions);
        }
    }
    else {
        chart.tooltip(false);
    }
    return params;
}
exports.tooltip = tooltip;
/**
 * K线图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    utils_1.flow(field, meta, common_1.theme, axis, tooltip, common_1.interaction, common_1.animation)(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map