"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = exports.legend = exports.animation = exports.theme = exports.interaction = exports.tooltip = exports.axis = exports.meta = exports.transformOptions = void 0;
var util_1 = require("@antv/util");
var common_1 = require("../../adaptor/common");
var flow_1 = require("../../utils/flow");
var view_1 = require("../../utils/view");
var option_1 = require("./util/option");
var legend_1 = require("./util/legend");
var geometry_1 = require("./util/geometry");
var constant_1 = require("./constant");
/**
 * 获取默认参数设置
 * 双轴图无法使用公共的 getDefaultOption, 因为双轴图存在[lineConfig, lineConfig] 这样的数据，需要根据传入的 option，生成不同的 defaultOption,
 * 并且 deepmix 无法 mix 数组类型数据，因此需要做一次参数的后转换
 * 这个函数针对 yAxis 和 geometryOptions
 * @param params
 */
function transformOptions(params) {
    return util_1.deepMix({}, params, {
        options: option_1.getOption(params.options),
    });
}
exports.transformOptions = transformOptions;
/**
 * 绘制图形
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, geometryOptions = options.geometryOptions, data = options.data;
    var leftGeometryOptions = geometryOptions[0], rightGeometryOptions = geometryOptions[1];
    var leftView, rightView;
    // 对于左线右柱的，将线的 view 放置在更上一层，防止线柱遮挡
    if (option_1.isLine(leftGeometryOptions) && option_1.isColumn(rightGeometryOptions)) {
        rightView = chart.createView({ id: constant_1.RIGHT_AXES_VIEW }).data(data[1]);
        leftView = chart.createView({ id: constant_1.LEFT_AXES_VIEW }).data(data[0]);
    }
    else {
        leftView = chart.createView({ id: constant_1.LEFT_AXES_VIEW }).data(data[0]);
        rightView = chart.createView({ id: constant_1.RIGHT_AXES_VIEW }).data(data[1]);
    }
    // 左轴图形
    geometry_1.drawSingleGeometry({
        chart: leftView,
        options: {
            xField: xField,
            yField: yField[0],
            geometryOption: leftGeometryOptions,
        },
    });
    // 右轴图形
    geometry_1.drawSingleGeometry({
        chart: rightView,
        options: {
            xField: xField,
            yField: yField[1],
            geometryOption: rightGeometryOptions,
        },
    });
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    var _a, _b;
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField, yField = options.yField;
    common_1.scale((_a = {},
        _a[xField] = xAxis,
        _a[yField[0]] = yAxis[0],
        _a))(util_1.deepMix({}, params, { chart: view_1.findViewById(chart, constant_1.LEFT_AXES_VIEW) }));
    common_1.scale((_b = {},
        _b[xField] = xAxis,
        _b[yField[1]] = yAxis[1],
        _b))(util_1.deepMix({}, params, { chart: view_1.findViewById(chart, constant_1.RIGHT_AXES_VIEW) }));
    return params;
}
exports.meta = meta;
/**
 * axis 配置
 * @param params
 */
function axis(params) {
    var chart = params.chart, options = params.options;
    var leftView = view_1.findViewById(chart, constant_1.LEFT_AXES_VIEW);
    var rightView = view_1.findViewById(chart, constant_1.RIGHT_AXES_VIEW);
    var xField = options.xField, yField = options.yField, yAxis = options.yAxis;
    var xAxis = options.xAxis;
    // 固定位置
    if (xAxis) {
        xAxis = util_1.deepMix({}, xAxis, { position: 'bottom' });
    }
    if (yAxis[0]) {
        yAxis[0] = util_1.deepMix({}, yAxis[0], { position: 'left' });
    }
    // 隐藏右轴 grid，留到 g2 解决
    if (yAxis[1]) {
        yAxis[1] = util_1.deepMix({}, yAxis[1], { position: 'right', grid: null });
    }
    chart.axis(xField, false);
    chart.axis(yField[0], false);
    chart.axis(yField[1], false);
    // 左 View
    leftView.axis(xField, xAxis);
    leftView.axis(yField[0], yAxis[0]);
    leftView.axis(yField[1], false);
    // 右 Y 轴
    rightView.axis(xField, false);
    rightView.axis(yField[0], false);
    rightView.axis(yField[1], yAxis[1]);
    return params;
}
exports.axis = axis;
/**
 * tooltip 配置
 * @param params
 */
function tooltip(params) {
    var chart = params.chart, options = params.options;
    var tooltip = options.tooltip;
    var leftView = view_1.findViewById(chart, constant_1.LEFT_AXES_VIEW);
    var rightView = view_1.findViewById(chart, constant_1.RIGHT_AXES_VIEW);
    if (tooltip !== undefined) {
        chart.tooltip(tooltip);
        // 在 view 上添加 tooltip，使得 shared 和 interaction active-region 起作用
        // view 应该继承 chart 里的 shared，但是从表现看来，继承有点问题
        leftView.tooltip({
            shared: true,
        });
        rightView.tooltip({
            shared: true,
        });
    }
    return params;
}
exports.tooltip = tooltip;
/**
 * interaction 配置
 * @param params
 */
function interaction(params) {
    var chart = params.chart;
    common_1.interaction(util_1.deepMix({}, params, { chart: view_1.findViewById(chart, constant_1.LEFT_AXES_VIEW) }));
    common_1.interaction(util_1.deepMix({}, params, { chart: view_1.findViewById(chart, constant_1.RIGHT_AXES_VIEW) }));
    return params;
}
exports.interaction = interaction;
/**
 * theme
 * @param params
 */
function theme(params) {
    var chart = params.chart;
    common_1.theme(util_1.deepMix({}, params, { chart: view_1.findViewById(chart, constant_1.LEFT_AXES_VIEW) }));
    common_1.theme(util_1.deepMix({}, params, { chart: view_1.findViewById(chart, constant_1.RIGHT_AXES_VIEW) }));
    return params;
}
exports.theme = theme;
function animation(params) {
    var chart = params.chart;
    common_1.animation(util_1.deepMix({}, params, { chart: view_1.findViewById(chart, constant_1.LEFT_AXES_VIEW) }));
    common_1.animation(util_1.deepMix({}, params, { chart: view_1.findViewById(chart, constant_1.RIGHT_AXES_VIEW) }));
    return params;
}
exports.animation = animation;
/**
 * legend 配置
 * 使用 custom，便于和类似于分组柱状图-单折线图的逻辑统一
 * @param params
 */
function legend(params) {
    var chart = params.chart, options = params.options;
    var legend = options.legend, geometryOptions = options.geometryOptions, yField = options.yField;
    var leftView = view_1.findViewById(chart, constant_1.LEFT_AXES_VIEW);
    var rightView = view_1.findViewById(chart, constant_1.RIGHT_AXES_VIEW);
    if (legend === false) {
        chart.legend(false);
    }
    else {
        // 存在单折线图或多折线图时，使用自定义图例
        // let customItem = getLegendItems(chart, );
        chart.on('beforepaint', function () {
            var leftItems = legend_1.getViewLegendItems({
                view: leftView,
                geometryOption: geometryOptions[0],
                yField: yField[0],
                legend: legend,
            });
            var rightItems = legend_1.getViewLegendItems({
                view: rightView,
                geometryOption: geometryOptions[1],
                yField: yField[1],
                legend: legend,
            });
            chart.legend(util_1.deepMix({}, legend, {
                custom: true,
                // todo 修改类型定义
                // @ts-ignore
                items: leftItems.concat(rightItems),
            }));
        });
        // // 自定义图例交互
        chart.on('legend-item:click', function (evt) {
            var delegateObject = evt.gEvent.delegateObject;
            if (delegateObject && delegateObject.item) {
                var _a = delegateObject.item, field_1 = _a.value, isGeometry = _a.isGeometry;
                // geometry 的时候，直接使用 view.changeVisible
                if (isGeometry) {
                    var idx = util_1.findIndex(yField, function (yF) { return yF === field_1; });
                    if (idx > -1) {
                        var geometries = util_1.get(chart.views, [idx, 'geometries']);
                        util_1.each(geometries, function (g) {
                            g.changeVisible(!delegateObject.item.unchecked);
                        });
                    }
                    return;
                }
                // 分组柱线图
                util_1.each(chart.views, function (view) {
                    // 单折柱图
                    var groupScale = view.getGroupScales();
                    util_1.each(groupScale, function (scale) {
                        if (scale.values && scale.values.indexOf(field_1) > -1) {
                            view.filter(scale.field, function (value) { return !delegateObject.item.unchecked || value !== field_1; });
                        }
                    });
                    chart.render(true);
                });
            }
        });
    }
    return params;
}
exports.legend = legend;
/**
 * 双折线图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return flow_1.flow(transformOptions, geometry, meta, axis, tooltip, interaction, theme, animation, legend)(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map