import { IGroup } from '@antv/g-base';
import Base, { IPluginBaseConfig } from '../base';
import { SliderOption, ControllerCfg } from './trendTimeBar';
import { TimeBarSliceOption } from './timeBarSlice';
import { IGraph } from '../../interface/graph';
import { ShapeStyle } from '../../types';
import { Interval } from './trend';
export interface Callback {
    originValue: number[];
    value: number[];
    target: IGroup;
}
interface TrendConfig {
    readonly data: {
        date: string;
        value: string;
    }[];
    readonly x?: number;
    readonly y?: number;
    readonly width?: number;
    readonly height?: number;
    readonly smooth?: boolean;
    readonly isArea?: boolean;
    readonly backgroundStyle?: ShapeStyle;
    readonly lineStyle?: ShapeStyle;
    readonly areaStyle?: ShapeStyle;
    readonly interval?: Interval;
}
interface TimeBarConfig extends IPluginBaseConfig {
    readonly x?: number;
    readonly y?: number;
    readonly width?: number;
    readonly height?: number;
    readonly padding?: number;
    readonly type?: 'trend' | 'simple' | 'slice';
    readonly trend?: TrendConfig;
    readonly slider?: SliderOption;
    readonly slice?: TimeBarSliceOption;
    readonly controllerCfg?: ControllerCfg;
    rangeChange?: (graph: IGraph, minValue: string, maxValue: string) => void;
    valueChange?: (graph: IGraph, value: string) => void;
}
export default class TimeBar extends Base {
    private cacheGraphData;
    getDefaultCfgs(): TimeBarConfig;
    /**
     * 初始化 TimeBar 的容器
     */
    initContainer(): void;
    init(): void;
    private renderTrend;
    private filterData;
    private initEvent;
    destroy(): void;
}
export {};
